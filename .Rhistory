str(data)
data <- me_df%>%
mutate("Over_Target" = `12 MONTH PARTICIPANTS` > `YEAR 1 PARTICIPANTS TARGET`)%>%
select(AWARD, Total_Project_Cost, Partnership_Funding, IMD_RANK, `PARTICIPANTS BASELINE`, `YEAR 1 PARTICIPANTS TARGET`,
`FEMALE TARGET PERCENTAGE`, `MALE TARGET PERCENTAGE`) %>%
data$IMD_RANK <-  as.numeric(data$IMD_RANK)
data <- me_df%>%
mutate("Over_Target" = `12 MONTH PARTICIPANTS` > `YEAR 1 PARTICIPANTS TARGET`)%>%
select(AWARD, Total_Project_Cost, Partnership_Funding, IMD_RANK, `PARTICIPANTS BASELINE`, `YEAR 1 PARTICIPANTS TARGET`,
`FEMALE TARGET PERCENTAGE`, `MALE TARGET PERCENTAGE`)
data$IMD_RANK <-  as.numeric(data$IMD_RANK)
str(data)
d <- lapply(data[,-9], scale)
data <- me_df%>%
mutate("Over_Target" = `12 MONTH PARTICIPANTS` > `YEAR 1 PARTICIPANTS TARGET`)%>%
select(AWARD, Total_Project_Cost, Partnership_Funding, IMD_RANK, `PARTICIPANTS BASELINE`, `YEAR 1 PARTICIPANTS TARGET`,
`FEMALE TARGET PERCENTAGE`, `MALE TARGET PERCENTAGE`, Over_Target)
data$IMD_RANK <-  as.numeric(data$IMD_RANK)
str(data)
d <- lapply(data[,-9], scale)
d <- as.data.frame(d)
d$Over_Target <- data$Over_Target
d <- na.omit(d)
#sampling method 2, using data partition function from caret package. It attempts to retain similar distributions of species across the train and test datasets. Times argument is number of partitions to create , List defines how you want the multiple partitions stored (list or matrix)
# more info on this method here https://topepo.github.io/caret/data-splitting.html
train_index <- createDataPartition(d$Over_Target, p = 0.8, times=1, list = FALSE) # from caret package. !st argument is dependent varaible, p = split, times = number it runs, list = false if 1 tmes
train_d <- d[train_index,]
test_d <- d[-train_index,]
# testing distribution
table((d$Over_Target))
prop.table(table(d$Over_Target))
prop.table(table(train_d$Over_Target))
prop.table(table(test_d$Over_Target))
train_d_labels <- train_d[,9] # Only target variable (Over_Target in this case)
#knn
train_d_no_class <- train_d[,-9] # no target variable (Over_Target in this case)
test_d_no_class <- test_d[,-9] # no target variable (Over_Target in this case)
train_d_labels <- train_d[,9] # Only target variable (Over_Target in this case)
sqrt(nrow(d)) # find square root of nrows
# four predictors in this model
d_test_pred <- knn(train = train_d_no_class, test = test_d_no_class,
cl = train_d_labels, k = 27)
#evaluation
test_d$pred <- d_test_pred # add new prediction column
test_d$correct <- 'n'
test_d$correct[test_d$Over_Target == test_d$pred] <- 'y' # Add another column which shows if correct
table(test_d$correct) # 29/30 correct
prop.table(table(test_d$correct)) #97% correct
CrossTable(x = test_d$Over_Target, y = d_test_pred,
prop.chisq=FALSE) # shows false positives / negatives - data-dependent on whether false positives / negatives are important e.g. cancer screening
data <- me_df%>%
mutate("Over_Target" = `12 MONTH PARTICIPANTS` > `YEAR 1 PARTICIPANTS TARGET`)%>%
select(AWARD, Total_Project_Cost, Partnership_Funding, IMD_RANK, `PARTICIPANTS BASELINE`, `YEAR 1 PARTICIPANTS TARGET`,
`FEMALE TARGET PERCENTAGE`, `MALE TARGET PERCENTAGE`, Over_Target)
data$IMD_RANK <-  as.numeric(data$IMD_RANK)
d <- lapply(data[,-9], scale)
d <- as.data.frame(d)
d$Over_Target <- data$Over_Target
d <- na.omit(d)
head(d)
kable(head(d))
knitr::opts_chunk$set(echo = TRUE)
library(caret)
library(dplyr)
library(readxl)
library(rpart)
library(rpart.plot)
library(kableExtra)
library(class)
library(gmodels)
library(rlang)
library(ggplot2)
setwd("C:/Users/jenniferb/OneDrive - Sport England/GitHub/Small Grants")
me_df <- read_xlsx('MandE.xlsx', na = "NA")
data <- me_df%>%
select(AWARD, Total_Project_Cost, Partnership_Funding, GOVERNMENT_OFFICE_REGION, Focus,
ALLOCATED_TO, IMD_RANK, `12 MONTH PARTICIPANTS`, Org_Class)
data <- as.data.frame(data)
data$IMD_RANK <- as.numeric(data$IMD_RANK)
data$GOVERNMENT_OFFICE_REGION <- as.factor(data$GOVERNMENT_OFFICE_REGION)
data$Focus <- as.factor(data$Focus)
data$ALLOCATED_TO <- as.factor(data$ALLOCATED_TO)
#set.seed(123)
inTrain <- createDataPartition(y=data$`12 MONTH PARTICIPANTS`, p=1, list=FALSE)
Train <- data[inTrain,]
#Test <- data[-inTrain,]
data <- me_df%>%
mutate("Over_Target" = `12 MONTH PARTICIPANTS` > `YEAR 1 PARTICIPANTS TARGET`)%>%
select(AWARD, Total_Project_Cost, Partnership_Funding, IMD_RANK, `PARTICIPANTS BASELINE`, `YEAR 1 PARTICIPANTS TARGET`,
`FEMALE TARGET PERCENTAGE`, `MALE TARGET PERCENTAGE`, Over_Target)
data$IMD_RANK <-  as.numeric(data$IMD_RANK)
d <- lapply(data[,-9], scale)
d <- as.data.frame(d)
d$Over_Target <- data$Over_Target
d <- na.omit(d)
kable(head(d))%>%
kable_styling(bootstrap_options = "bordered",
full_width = TRUE)
data <- me_df%>%
mutate("Over_Target" = `12 MONTH PARTICIPANTS` > `YEAR 1 PARTICIPANTS TARGET`)%>%
select(AWARD, Total_Project_Cost, Partnership_Funding, IMD_RANK, `PARTICIPANTS BASELINE`, `YEAR 1 PARTICIPANTS TARGET`,
`FEMALE TARGET PERCENTAGE`, `MALE TARGET PERCENTAGE`, Over_Target)
data$IMD_RANK <-  as.numeric(data$IMD_RANK)
d <- lapply(data[,-9], scale)
d <- as.data.frame(d)
d$Over_Target <- data$Over_Target
d <- na.omit(d)
kable(colnames(d))%>%
kable_styling(bootstrap_options = "bordered",
full_width = TRUE)
d<- d %>%
rename("Award" = AWARD, `Total Cost` = Total_Project_Cost, `Partnership Funding` = Partnership_Funding, `IMD Rank`= IMD_RANK, "Baseline" = PARTICIPANTS.BASELINE, `12 Month Target` = YEAR.1.PARTICIPANTS.TARGET, `Female Target` = FEMALE.TARGET.PERCENTAGE, `Male Target` = MALE.TARGET.PERCENTAGE, `Over Target` = Over_Target )
kable(colnames(d))%>%
kable_styling(bootstrap_options = "bordered",
full_width = TRUE)
data <- me_df%>%
mutate("Over_Target" = `12 MONTH PARTICIPANTS` > `YEAR 1 PARTICIPANTS TARGET`)%>%
select(AWARD, Total_Project_Cost, Partnership_Funding, IMD_RANK, `PARTICIPANTS BASELINE`, `YEAR 1 PARTICIPANTS TARGET`,
`FEMALE TARGET PERCENTAGE`, `MALE TARGET PERCENTAGE`, Over_Target)
data$IMD_RANK <-  as.numeric(data$IMD_RANK)
d <- lapply(data[,-9], scale)
d <- as.data.frame(d)
d$Over_Target <- data$Over_Target
d <- na.omit(d)
d<- d %>%
rename("Award" = AWARD, `Total Cost` = Total_Project_Cost, `Partnership Funding` = Partnership_Funding, `IMD Rank`= IMD_RANK, "Baseline" = PARTICIPANTS.BASELINE, `12 Month Target` = YEAR.1.PARTICIPANTS.TARGET, `Female Target` = FEMALE.TARGET.PERCENTAGE, `Male Target` = MALE.TARGET.PERCENTAGE, `Over Target` = Over_Target )
kable(colnames(d), col.names = "Variables Used")%>%
kable_styling(bootstrap_options = "bordered",
full_width = TRUE)
data <- me_df%>%
mutate("Over_Target" = `12 MONTH PARTICIPANTS` > `YEAR 1 PARTICIPANTS TARGET`)%>%
select(AWARD, Total_Project_Cost, Partnership_Funding, IMD_RANK, `PARTICIPANTS BASELINE`, `YEAR 1 PARTICIPANTS TARGET`,
`FEMALE TARGET PERCENTAGE`, `MALE TARGET PERCENTAGE`, Over_Target)
data$IMD_RANK <-  as.numeric(data$IMD_RANK)
d <- lapply(data[,-9], scale)
d <- as.data.frame(d)
d$Over_Target <- data$Over_Target
d <- na.omit(d)
d<- d %>%
rename("Award" = AWARD, `Total Cost` = Total_Project_Cost, `Partnership Funding` = Partnership_Funding, `IMD Rank`= IMD_RANK, "Baseline" = PARTICIPANTS.BASELINE, `12 Month Target` = YEAR.1.PARTICIPANTS.TARGET, `Female Target` = FEMALE.TARGET.PERCENTAGE, `Male Target` = MALE.TARGET.PERCENTAGE, `Over Target` = Over_Target )
kable(colnames(d), col.names = "Variables Used")%>%
kable_styling(bootstrap_options = "bordered",
full_width = FALSE)
ggplot(d)+
geom_point(aes(Award, `Total Cost`, color = `Over Target`)) +
theme(text = element_text(family = "Norwester", size = 12, color = "#525252"),
plot.title=element_text(size=14,family = "Norwester", face="bold", hjust = 0.5, color = "#525252"),
axis.text.x = element_text(angle = 45, hjust = 1),
panel.grid = element_blank(),
panel.background = element_blank(),
plot.caption=element_text(size=9, hjust=0, margin=margin(15,0,0,0)),
legend.position = "left")  +
scale_color_manual(values = se_colour, name = "Focus")+
labs( x= "Amount Awarded", y = "Total Project Cost", title = "Funding Amount by Total Project Cost")+
scale_y_continuous(labels = scales::dollar_format(prefix = "£")) +
scale_x_continuous(labels = scales::dollar_format(prefix = "£"))
knitr::opts_chunk$set(echo = TRUE)
library(caret)
library(dplyr)
library(readxl)
library(rpart)
library(rpart.plot)
library(kableExtra)
library(class)
library(gmodels)
library(rlang)
library(ggplot2)
setwd("C:/Users/jenniferb/OneDrive - Sport England/GitHub/Small Grants")
me_df <- read_xlsx('MandE.xlsx', na = "NA")
se_colour<- c("#E79AB5", "#B8345C", "#8CCDD6", "#43A8B6", "#00818F", "#C1DC9A", "#7ABB40", "#5D4086")
ggplot(d)+
geom_point(aes(Award, `Total Cost`, color = `Over Target`)) +
theme(text = element_text(family = "Norwester", size = 12, color = "#525252"),
plot.title=element_text(size=14,family = "Norwester", face="bold", hjust = 0.5, color = "#525252"),
axis.text.x = element_text(angle = 45, hjust = 1),
panel.grid = element_blank(),
panel.background = element_blank(),
plot.caption=element_text(size=9, hjust=0, margin=margin(15,0,0,0)),
legend.position = "left")  +
scale_color_manual(values = se_colour, name = "Focus")+
labs( x= "Amount Awarded", y = "Total Project Cost", title = "Funding Amount by Total Project Cost")+
scale_y_continuous(labels = scales::dollar_format(prefix = "£")) +
scale_x_continuous(labels = scales::dollar_format(prefix = "£"))
knitr::opts_chunk$set(echo = TRUE)
library(caret)
library(dplyr)
library(readxl)
library(rpart)
library(rpart.plot)
library(kableExtra)
library(class)
library(gmodels)
library(rlang)
library(ggplot2)
library(extrafont)
setwd("C:/Users/jenniferb/OneDrive - Sport England/GitHub/Small Grants")
me_df <- read_xlsx('MandE.xlsx', na = "NA")
se_colour<- c( "#B8345C", "#8CCDD6", "#43A8B6", "#00818F", "#C1DC9A", "#7ABB40", "#5D4086", "#E79AB5",)
knitr::opts_chunk$set(echo = TRUE)
library(caret)
library(dplyr)
library(readxl)
library(rpart)
library(rpart.plot)
library(kableExtra)
library(class)
library(gmodels)
library(rlang)
library(ggplot2)
library(extrafont)
setwd("C:/Users/jenniferb/OneDrive - Sport England/GitHub/Small Grants")
me_df <- read_xlsx('MandE.xlsx', na = "NA")
se_colour<- c( "#B8345C", "#8CCDD6", "#43A8B6", "#00818F", "#C1DC9A", "#7ABB40", "#5D4086", "#E79AB5",)
knitr::opts_chunk$set(echo = TRUE)
library(caret)
library(dplyr)
library(readxl)
library(rpart)
library(rpart.plot)
library(kableExtra)
library(class)
library(gmodels)
library(rlang)
library(ggplot2)
library(extrafont)
setwd("C:/Users/jenniferb/OneDrive - Sport England/GitHub/Small Grants")
me_df <- read_xlsx('MandE.xlsx', na = "NA")
se_colour<- c( "#B8345C", "#8CCDD6", "#43A8B6", "#00818F", "#C1DC9A", "#7ABB40", "#5D4086", "#E79AB5")
ggplot(d)+
geom_point(aes(Baseline, `12 Month Target`, color = `Over Target`)) +
theme(text = element_text(family = "Norwester", size = 12, color = "#525252"),
plot.title=element_text(size=14,family = "Norwester", face="bold", hjust = 0.5, color = "#525252"),
axis.text.x = element_text(angle = 45, hjust = 1),
panel.grid = element_blank(),
panel.background = element_blank(),
plot.caption=element_text(size=9, hjust=0, margin=margin(15,0,0,0)),
legend.position = "left")  +
scale_color_manual(values = se_colour, name = "Over Target")+
labs( x= "Amount Awarded", y = "Total Project Cost", title = "Funding Amount by Total Project Cost")#+
# scale_y_continuous(labels = scales::dollar_format(prefix = "£")) +
#  scale_x_continuous(labels = scales::dollar_format(prefix = "£"))
ggplot(me_df)+
geom_point(aes(`PARTICIPANTS BASELINE`, `YEAR 1 PARTICIPANTS TARGET`, color = `Over Target`)) +
theme(text = element_text(family = "Norwester", size = 12, color = "#525252"),
plot.title=element_text(size=14,family = "Norwester", face="bold", hjust = 0.5, color = "#525252"),
axis.text.x = element_text(angle = 45, hjust = 1),
panel.grid = element_blank(),
panel.background = element_blank(),
plot.caption=element_text(size=9, hjust=0, margin=margin(15,0,0,0)),
legend.position = "left")  +
scale_color_manual(values = se_colour, name = "Over Target")+
labs( x= "Amount Awarded", y = "Total Project Cost", title = "Funding Amount by Total Project Cost")#+
data <- data %>%
rename("Award" = AWARD, `Total Cost` = Total_Project_Cost, `Partnership Funding` = Partnership_Funding, `IMD Rank`= IMD_RANK, "Baseline" = PARTICIPANTS.BASELINE, `12 Month Target` = YEAR.1.PARTICIPANTS.TARGET, `Female Target` = FEMALE.TARGET.PERCENTAGE, `Male Target` = MALE.TARGET.PERCENTAGE, `Over Target` = Over_Target )
me_df%>%
mutate("Over_Target" = `12 MONTH PARTICIPANTS` > `YEAR 1 PARTICIPANTS TARGET`)%>%
select(AWARD, Total_Project_Cost, Partnership_Funding, IMD_RANK, `PARTICIPANTS BASELINE`, `YEAR 1 PARTICIPANTS TARGET`,
`FEMALE TARGET PERCENTAGE`, `MALE TARGET PERCENTAGE`, Over_Target) %>%
ggplot()+
geom_point(aes(`PARTICIPANTS BASELINE`, `YEAR 1 PARTICIPANTS TARGET`, color = `Over Target`)) +
theme(text = element_text(family = "Norwester", size = 12, color = "#525252"),
plot.title=element_text(size=14,family = "Norwester", face="bold", hjust = 0.5, color = "#525252"),
axis.text.x = element_text(angle = 45, hjust = 1),
panel.grid = element_blank(),
panel.background = element_blank(),
plot.caption=element_text(size=9, hjust=0, margin=margin(15,0,0,0)),
legend.position = "left")  +
scale_color_manual(values = se_colour, name = "Over Target")+
labs( x= "Amount Awarded", y = "Total Project Cost", title = "Funding Amount by Total Project Cost")#+
me_df%>%
mutate("Over_Target" = `12 MONTH PARTICIPANTS` > `YEAR 1 PARTICIPANTS TARGET`)%>%
select(AWARD, Total_Project_Cost, Partnership_Funding, IMD_RANK, `PARTICIPANTS BASELINE`, `YEAR 1 PARTICIPANTS TARGET`,
`FEMALE TARGET PERCENTAGE`, `MALE TARGET PERCENTAGE`, Over_Target) %>%
ggplot()+
geom_point(aes(`PARTICIPANTS BASELINE`, `YEAR 1 PARTICIPANTS TARGET`, color = `Over_Target`)) +
theme(text = element_text(family = "Norwester", size = 12, color = "#525252"),
plot.title=element_text(size=14,family = "Norwester", face="bold", hjust = 0.5, color = "#525252"),
axis.text.x = element_text(angle = 45, hjust = 1),
panel.grid = element_blank(),
panel.background = element_blank(),
plot.caption=element_text(size=9, hjust=0, margin=margin(15,0,0,0)),
legend.position = "left")  +
scale_color_manual(values = se_colour, name = "Over Target")+
labs( x= "Amount Awarded", y = "Total Project Cost", title = "Funding Amount by Total Project Cost")#+
# scale_y_continuous(labels = scales::dollar_format(prefix = "£")) +
#  scale_x_continuous(labels = scales::dollar_format(prefix = "£"))
me_df%>%
mutate("Over_Target" = `12 MONTH PARTICIPANTS` > `YEAR 1 PARTICIPANTS TARGET`)%>%
select(AWARD, Total_Project_Cost, Partnership_Funding, IMD_RANK, `PARTICIPANTS BASELINE`, `YEAR 1 PARTICIPANTS TARGET`,
`FEMALE TARGET PERCENTAGE`, `MALE TARGET PERCENTAGE`, Over_Target) %>%
ggplot()+
geom_point(aes(`PARTICIPANTS BASELINE`, `YEAR 1 PARTICIPANTS TARGET`, color = `Over_Target`)) +
theme(text = element_text(family = "Norwester", size = 12, color = "#525252"),
plot.title=element_text(size=14,family = "Norwester", face="bold", hjust = 0.5, color = "#525252"),
axis.text.x = element_text(angle = 45, hjust = 1),
panel.grid = element_blank(),
panel.background = element_blank(),
plot.caption=element_text(size=9, hjust=0, margin=margin(15,0,0,0)),
legend.position = "left")  +
scale_color_manual(values = se_colour, name = "Over Target")+
labs( x= "Amount Awarded", y = "Total Project Cost", title = "Funding Amount by Total Project Cost")+
xlim(0, 5000)
# scale_y_continuous(labels = scales::dollar_format(prefix = "£")) +
#  scale_x_continuous(labels = scales::dollar_format(prefix = "£"))
me_df%>%
mutate("Over_Target" = `12 MONTH PARTICIPANTS` > `YEAR 1 PARTICIPANTS TARGET`)%>%
select(AWARD, Total_Project_Cost, Partnership_Funding, IMD_RANK, `PARTICIPANTS BASELINE`, `YEAR 1 PARTICIPANTS TARGET`,
`FEMALE TARGET PERCENTAGE`, `MALE TARGET PERCENTAGE`, Over_Target) %>%
ggplot()+
geom_point(aes(`PARTICIPANTS BASELINE`, `YEAR 1 PARTICIPANTS TARGET`, color = `Over_Target`)) +
theme(text = element_text(family = "Norwester", size = 12, color = "#525252"),
plot.title=element_text(size=14,family = "Norwester", face="bold", hjust = 0.5, color = "#525252"),
axis.text.x = element_text(angle = 45, hjust = 1),
panel.grid = element_blank(),
panel.background = element_blank(),
plot.caption=element_text(size=9, hjust=0, margin=margin(15,0,0,0)),
legend.position = "left")  +
scale_color_manual(values = se_colour, name = "Over Target")+
labs( x= "Amount Awarded", y = "Total Project Cost", title = "Funding Amount by Total Project Cost")+
xlim(0, 5000)+
ylim(0, 6000)
# scale_y_continuous(labels = scales::dollar_format(prefix = "£")) +
#  scale_x_continuous(labels = scales::dollar_format(prefix = "£"))
me_df%>%
mutate("Over_Target" = `12 MONTH PARTICIPANTS` > `YEAR 1 PARTICIPANTS TARGET`)%>%
select(AWARD, Total_Project_Cost, Partnership_Funding, IMD_RANK, `PARTICIPANTS BASELINE`, `YEAR 1 PARTICIPANTS TARGET`,
`FEMALE TARGET PERCENTAGE`, `MALE TARGET PERCENTAGE`, Over_Target) %>%
ggplot()+
geom_point(aes(`PARTICIPANTS BASELINE`, `YEAR 1 PARTICIPANTS TARGET`, color = `Over_Target`)) +
theme(text = element_text(family = "Norwester", size = 12, color = "#525252"),
plot.title=element_text(size=14,family = "Norwester", face="bold", hjust = 0.5, color = "#525252"),
axis.text.x = element_text(angle = 45, hjust = 1),
panel.grid = element_blank(),
panel.background = element_blank(),
plot.caption=element_text(size=9, hjust=0, margin=margin(15,0,0,0)),
legend.position = "left")  +
scale_color_manual(values = se_colour, name = "Over Target")+
labs( x= "Baseline", y = "Year 1 Target", title = "Funding Amount by Total Project Cost")+
xlim(0, 2000)+
ylim(0, 2000)
# scale_y_continuous(labels = scales::dollar_format(prefix = "£")) +
#  scale_x_continuous(labels = scales::dollar_format(prefix = "£"))
#sampling method 2, using data partition function from caret package. It attempts to retain similar distributions of species across the train and test datasets. Times argument is number of partitions to create , List defines how you want the multiple partitions stored (list or matrix)
# more info on this method here https://topepo.github.io/caret/data-splitting.html
train_index <- createDataPartition(d$Over_Target, p = 0.8, times=1, list = FALSE) # from caret package. !st argument is dependent varaible, p = split, times = number it runs, list = false if 1 tmes
#sampling method 2, using data partition function from caret package. It attempts to retain similar distributions of species across the train and test datasets. Times argument is number of partitions to create , List defines how you want the multiple partitions stored (list or matrix)
# more info on this method here https://topepo.github.io/caret/data-splitting.html
train_index <- createDataPartition(d$`Over Target`, p = 0.8, times=1, list = FALSE) # from caret package. !st argument is dependent varaible, p = split, times = number it runs, list = false if 1 tmes
train_d <- d[train_index,]
test_d <- d[-train_index,]
# testing distribution
#table((d$Over_Target))
#prop.table(table(d$Over_Target))
#prop.table(table(train_d$Over_Target))
#prop.table(table(test_d$Over_Target))
#knn
train_d_no_class <- train_d[,-9] # no target variable (Over_Target in this case)
test_d_no_class <- test_d[,-9] # no target variable (Over_Target in this case)
train_d_labels <- train_d[,9] # Only target variable (Over_Target in this case)
# sqrt(nrow(d)) # find square root of nrows
# 8 predictors in this model
d_test_pred <- knn(train = train_d_no_class, test = test_d_no_class,
cl = train_d_labels, k = 27)
#evaluation
test_d$pred <- d_test_pred # add new prediction column
test_d$correct <- 'n'
test_d$correct[test_d$Over_Target == test_d$pred] <- 'y' # Add another column which shows if correct
table(test_d$correct) # 29/30 correct
prop.table(table(test_d$correct)) #97% correct
CrossTable(x = test_d$Over_Target, y = d_test_pred,
prop.chisq=FALSE)
#sampling method 2, using data partition function from caret package. It attempts to retain similar distributions of species across the train and test datasets. Times argument is number of partitions to create , List defines how you want the multiple partitions stored (list or matrix)
# more info on this method here https://topepo.github.io/caret/data-splitting.html
train_index <- createDataPartition(d$`Over Target`, p = 0.8, times=1, list = FALSE) # from caret package. !st argument is dependent varaible, p = split, times = number it runs, list = false if 1 tmes
train_d <- d[train_index,]
test_d <- d[-train_index,]
# testing distribution
#table((d$Over_Target))
#prop.table(table(d$Over_Target))
#prop.table(table(train_d$Over_Target))
#prop.table(table(test_d$Over_Target))
#knn
train_d_no_class <- train_d[,-9] # no target variable (Over_Target in this case)
test_d_no_class <- test_d[,-9] # no target variable (Over_Target in this case)
train_d_labels <- train_d[,9] # Only target variable (Over_Target in this case)
# sqrt(nrow(d)) # find square root of nrows
# 8 predictors in this model
d_test_pred <- knn(train = train_d_no_class, test = test_d_no_class,
cl = train_d_labels, k = 27)
#evaluation
test_d$pred <- d_test_pred # add new prediction column
test_d$correct <- 'n'
test_d$correct[test_d$Over_Target == test_d$pred] <- 'y' # Add another column which shows if correct
table(test_d$correct) # 29/30 correct
prop.table(table(test_d$correct)) #97% correct
CrossTable(x = test_d$`Over Target`, y = d_test_pred,
prop.chisq=FALSE)
data <- me_df%>%
mutate("Over_Target" = `12 MONTH PARTICIPANTS` > `YEAR 1 PARTICIPANTS TARGET`)%>%
select(AWARD, Total_Project_Cost, Partnership_Funding, IMD_RANK, `PARTICIPANTS BASELINE`, `YEAR 1 PARTICIPANTS TARGET`,
`FEMALE TARGET PERCENTAGE`, `MALE TARGET PERCENTAGE`, Over_Target)
data$IMD_RANK <-  as.numeric(data$IMD_RANK)
d <- lapply(data[,-9], scale)
d <- as.data.frame(d)
d$Over_Target <- data$Over_Target
d <- na.omit(d)
a<- d %>%
rename("Award" = AWARD, `Total Cost` = Total_Project_Cost, `Partnership Funding` = Partnership_Funding, `IMD Rank`= IMD_RANK, "Baseline" = PARTICIPANTS.BASELINE, `12 Month Target` = YEAR.1.PARTICIPANTS.TARGET, `Female Target` = FEMALE.TARGET.PERCENTAGE, `Male Target` = MALE.TARGET.PERCENTAGE, `Over Target` = Over_Target )
kable(colnames(a), col.names = "Variables Used")%>%
kable_styling(bootstrap_options = "bordered",
full_width = FALSE)
#sampling method 2, using data partition function from caret package. It attempts to retain similar distributions of species across the train and test datasets. Times argument is number of partitions to create , List defines how you want the multiple partitions stored (list or matrix)
# more info on this method here https://topepo.github.io/caret/data-splitting.html
train_index <- createDataPartition(d$Over_Target, p = 0.8, times=1, list = FALSE) # from caret package. !st argument is dependent varaible, p = split, times = number it runs, list = false if 1 tmes
train_d <- d[train_index,]
test_d <- d[-train_index,]
# testing distribution
#table((d$Over_Target))
#prop.table(table(d$Over_Target))
#prop.table(table(train_d$Over_Target))
#prop.table(table(test_d$Over_Target))
#knn
train_d_no_class <- train_d[,-9] # no target variable (Over_Target in this case)
test_d_no_class <- test_d[,-9] # no target variable (Over_Target in this case)
train_d_labels <- train_d[,9] # Only target variable (Over_Target in this case)
# sqrt(nrow(d)) # find square root of nrows
# 8 predictors in this model
d_test_pred <- knn(train = train_d_no_class, test = test_d_no_class,
cl = train_d_labels, k = 27)
#evaluation
test_d$pred <- d_test_pred # add new prediction column
test_d$correct <- 'n'
test_d$correct[test_d$Over_Target == test_d$pred] <- 'y' # Add another column which shows if correct
kable(table(test_d$correct)) # 29/30 correct
kable(prop.table(table(test_d$correct))) #97% correct
CrossTable(x = test_d$Over_Target, y = d_test_pred,
prop.chisq=FALSE)
#sampling method 2, using data partition function from caret package. It attempts to retain similar distributions of species across the train and test datasets. Times argument is number of partitions to create , List defines how you want the multiple partitions stored (list or matrix)
# more info on this method here https://topepo.github.io/caret/data-splitting.html
train_index <- createDataPartition(d$Over_Target, p = 0.8, times=1, list = FALSE) # from caret package. !st argument is dependent varaible, p = split, times = number it runs, list = false if 1 tmes
train_d <- d[train_index,]
test_d <- d[-train_index,]
# testing distribution
#table((d$Over_Target))
#prop.table(table(d$Over_Target))
#prop.table(table(train_d$Over_Target))
#prop.table(table(test_d$Over_Target))
#knn
train_d_no_class <- train_d[,-9] # no target variable (Over_Target in this case)
test_d_no_class <- test_d[,-9] # no target variable (Over_Target in this case)
train_d_labels <- train_d[,9] # Only target variable (Over_Target in this case)
# sqrt(nrow(d)) # find square root of nrows
# 8 predictors in this model
d_test_pred <- knn(train = train_d_no_class, test = test_d_no_class,
cl = train_d_labels, k = 27)
#evaluation
test_d$pred <- d_test_pred # add new prediction column
test_d$correct <- 'Incorrect'
test_d$correct[test_d$Over_Target == test_d$pred] <- 'Correct' # Add another column which shows if correct
#kable(table(test_d$correct))
kable(prop.table(table(test_d$correct)), col.names = c("Correct?","Proportion"))%>%
kable_styling(bootstrap_options = "bordered",
full_width = FALSE)
#kable(CrossTable(x = test_d$Over_Target, y = d_test_pred,
# prop.chisq=FALSE))
kable(CrossTable(x = test_d$Over_Target, y = d_test_pred,
prop.chisq=FALSE))
CrossTable(x = test_d$Over_Target, y = d_test_pred,
prop.chisq=FALSE)
# looks good! Could test different k values and normalising to see if improvements could be made. Could also cross validate by running again with a different random sample of train and test
library(httr)
?GET
library(httr)
library(jsonlite)
username <- "jennifer.bufton@sportengland.org"
password <- "3m1xKUfas8tmTgjQ29AKSHPGWburMXZliUd67-ZD"
base = "https://api.companieshouse.gov.uk/search/companies/Sport+England"
df <- GET(base,
authenticate("user", "pass", type = "basic"),
add_headers(auth_appkey = password))
df
jsonlite::parse_json(df)
authenticate(username, password, type = "basic")
jsonlite::parse_json(df)
#username <- "jennifer.bufton@sportengland.org"
username <- "Sport England"
password <- "3m1xKUfas8tmTgjQ29AKSHPGWburMXZliUd67-ZD"
base = "https://api.companieshouse.gov.uk/search/companies/Sport+England"
df <- GET(base,
df
jsonlite::parse_json(df)
jsonlite::parse_json(df)
username <- "3m1xKUfas8tmTgjQ29AKSHPGWburMXZliUd67-ZD"
password <- ""
base = "https://api.companieshouse.gov.uk/search/companies/Sport+England"
df <- GET(base,
jsonlite::parse_json(df)
base = "3m1xKUfas8tmTgjQ29AKSHPGWburMXZliUd67-ZD:https://api.companieshouse.gov.uk/search/companies/Sport+England"
df <- GET(base)
jsonlite::parse_json(df)
df <- GET(base, authenticate(user = username, password = password))
jsonlite::parse_json(df)
jsonlite::parse_json(df)
base = "https://api.companieshouse.gov.uk/search/companies?q=Football+Association"
username <- "3m1xKUfas8tmTgjQ29AKSHPGWburMXZliUd67-ZD"
password <- ""
df <- GET(base, authenticate(user = username, password = password))
jsonlite::parse_json(df)
jsonlite::fromJSON(df)
df
jsonlite::read_json(df)
df <- jsonlite::parse_json(df)

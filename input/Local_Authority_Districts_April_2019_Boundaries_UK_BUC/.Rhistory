names(df)
### read in data to append
df <- read.csv('Power BI/Active Lives Survey/Gender_May1819_LA_CC_Regv2.csv')
names(df)
df <- df[, c(1,2,10)]
#import shapefile
setwd("GitHub/Geographical Data/LAD/Local_Authority_Districts_April_2019_Boundaries_UK_BUC")
map1 <- readOGR(dsn = ".", layer = "Local_Authority_Districts_April_2019_Boundaries_UK_BUC")
summary(map1) # see if projections used
## map without distortion
map1@data$id <- rownames(map1@data)
map1@data   <- join(map1@data, df, by="lad19cd")
map1.df     <- fortify(map1)
map1.df     <- join(map1.df,map1@data, by="id")
map.clean <- map1.df[grep("E", map1.df$lad19cd),] # England only
map.clean <- map.clean[, !duplicated(colnames(map.clean))] # remove dupe cols
ggplot() +
geom_polygon(data = map.clean, aes(x = long, y = lat, group = group, fill = Male.Active))+
theme_minimal() +
theme(axis.title.x = element_blank(),axis.title.y = element_blank(),
text = element_text(family = "Norwester", color = "#5F5F5F"),
plot.title=element_text(size=14,family = "Norwester", face="bold", hjust = 0.5),
panel.grid = element_blank(),
axis.text = element_blank(),
axis.ticks.x = element_blank())+
scale_fill_gradient(high = '#f7fcfd', low = '#00441b',
name='% of Active Males', breaks = 0.1*0:9, labels = percent(0.1*0:9))
## create cartogram
test_cart <- cartogram_cont(map1, "Male.Active", itermax = 7)
# check with basic plot
plot(test_cart)
# make into dataframe
map1.df     <- fortify(test_cart)
map1.df     <- join(map1.df,test_cart@data, by="id")
## remove wales and dupe col
map1.df <- map1.df[grep("E", map1.df$lad19cd),] # England only
map1.df <- map1.df[, !duplicated(colnames(map1.df))] # remove dupe cols
map1.df <- map1.df[, !map1.df$lad19nm.1]
colnames(map1.df)
map1.df <- map1.df[, c(1:15,17)]
data <- rbind(map.clean, map1.df, map.clean)
data$ease <- "cubic-in-out"
data$time <- rep(c(1:3), each=nrow(afr_df))
data$time <- rep(c(1:3), each=nrow(map.clean))
data$time <- rep(c(1:3), each=nrow(map1.df))
str(data)
data$time <- rep(c(1:16), each=nrow())
data$time <- rep(c(1:16), each=nrow(map.clean))
data$time <- rep(c(1:2), each=nrow(map.clean))
?rep
data(wrld_simpl)
library(maptools)     # world boundaries coordinates
data(wrld_simpl)
afr=wrld_simpl[wrld_simpl$REGION==2,]
# A basic representation
plot(afr)
afr_cartogram <- cartogram(afr, "POP2005", itermax=7)
# A basic representation
plot(afr_cartogram)
afr_cartogram_df <- tidy(afr_cartogram) %>% left_join(. , afr_cartogram@data, by=c("id"="ISO3"))
library(broom)        # from geospatial format to data frame
afr_cartogram_df <- tidy(afr_cartogram) %>% left_join(. , afr_cartogram@data, by=c("id"="ISO3"))
afr_df <- tidy(afr) %>% left_join(. , afr@data, by=c("id"="ISO3"))
# And using the advices of chart #331 we can custom it to get a better result:
ggplot() +
geom_polygon(data = afr_df, aes(fill = POP2005/1000000, x = long, y = lat, group = group) , size=0, alpha=0.9) +
theme_void() +
scale_fill_viridis(name="Population (M)", breaks=c(1,50,100, 140), guide = guide_legend( keyheight = unit(3, units = "mm"), keywidth=unit(12, units = "mm"), label.position = "bottom", title.position = 'top', nrow=1)) +
labs( title = "Africa", subtitle="Population per country in 2005" ) +
ylim(-35,35) +
theme(
text = element_text(color = "#22211d"),
plot.background = element_rect(fill = "#f5f5f4", color = NA),
panel.background = element_rect(fill = "#f5f5f4", color = NA),
legend.background = element_rect(fill = "#f5f5f4", color = NA),
plot.title = element_text(size= 22, hjust=0.5, color = "#4e4d47", margin = margin(b = -0.1, t = 0.4, l = 2, unit = "cm")),
plot.subtitle = element_text(size= 13, hjust=0.5, color = "#4e4d47", margin = margin(b = -0.1, t = 0.4, l = 2, unit = "cm")),
legend.position = c(0.2, 0.26)
) +
coord_map()
head(afr_df)
setwd("C:/Users/jenniferb/OneDrive - Sport England")
### read in data to append
df <- read.csv('C:/Users/jenniferb/OneDrive - Sport England/Power BI/Active Lives Survey/Gender_May1819_LA_CC_Regv2.csv')
df %>%
select('lad19cd', 'lad19nm', 'Male.Active')
df <- df %>%
select('lad19cd', 'lad19nm', 'Male.Active')
#import shapefile
setwd("C:/Users/jenniferb/OneDrive - Sport England/GitHub/Geographical Data/LAD/Local_Authority_Districts_April_2019_Boundaries_UK_BUC")
map1 <- readOGR(dsn = ".", layer = "Local_Authority_Districts_April_2019_Boundaries_UK_BUC")
summary(map1) # see if projections used
## map without distortion
map1@data$id <- rownames(map1@data)
map1@data   <- join(map1@data, df, by="lad19cd")
map.clean     <- fortify(map1)
map.clean     <- join(map.clean,map1@data, by="id")
map.clean <- map.clean[grep("E", map.clean$lad19cd),] # England only
map.clean <- map.clean[, !duplicated(colnames(map.clean))] # remove dupe cols
## create cartogram
test_cart <- cartogram_cont(map1, "Male.Active", itermax = 7)
# make into dataframe
map1.df     <- fortify(test_cart)
map1.df     <- join(map1.df,test_cart@data, by="id")
colnames(map1.df)
## remove wales and dupe col
map1.df <- map1.df[grep("E", map1.df$lad19cd),] # England only
map1.df <- map1.df[, !duplicated(colnames(map1.df))] # remove dupe cols
map.clean <- map.clean[grep("E", map.clean$lad19cd),] # England only
## create cartogram
test_cart <- cartogram_cont(map1, "Male.Active", itermax = 7)
# make into dataframe
map1.df     <- fortify(test_cart)
map1.df <- map1.df[, !duplicated(colnames(map1.df))] # remove dupe cols
map1.df     <- join(map1.df,test_cart@data, by="id")
map1.df <- map1.df[, !duplicated(colnames(map1.df))] # remove dupe cols
map1.df <- map1.df[, c(1:15,17)]
data <- rbind(map.clean, map1.df, map.clean)
data$ease <- "cubic-in-out"
data$time <- rep(c(1:3), each=nrow(map.clean))
# Calculate the transition between these 2 objects?
dt <- tween_elements(data, time='time', group='id', ease='ease', nframes = 30)
# check a few frame
ggplot() +
geom_polygon(data = dt %>% filter(.frame==0) %>% arrange(order),
aes(fill = POP2005, x = long, y = lat, group = group), size=0, alpha=0.9
)
# check a few frame
ggplot() +
geom_polygon(data = dt %>% filter(.frame==0) %>% arrange(order),
aes(fill = Male.Active, x = long, y = lat, group = group), size=0, alpha=0.9
)
ggplot() +
geom_polygon(data = dt %>% filter(.frame==5) %>% arrange(order),
aes(fill = Male.Active, x = long, y = lat, group = group) , size=0, alpha=0.9
)
head(dt)
dt %>% filter(.frame==0)
dt %>% filter(.frame==5)
dt %>% filter(.frame==10)
# Calculate the transition between these 2 objects?
dt <- tween_elements(data, time='time', ease='ease', nframes = 30)
# Calculate the transition between these 2 objects?
dt <- tween_elements(data, time='time', group = 'objectid', ease='ease', nframes = 30)
# check a few frame
ggplot() +
geom_polygon(data = dt %>% filter(.frame==0) %>% arrange(order),
aes(fill = Male.Active, x = long, y = lat, group = group), size=0, alpha=0.9
)
ggplot() +
geom_polygon(data = dt %>% filter(.frame==5) %>% arrange(order),
aes(fill = Male.Active, x = long, y = lat, group = group) , size=0, alpha=0.9
)
ggplot() +
geom_polygon(data = dt %>% filter(.frame==10) %>% arrange(order),
aes(fill = POP2005, x = long, y = lat, group = group) , size=0, alpha=0.9
)
ggplot() +
geom_polygon(data = dt %>% filter(.frame==10) %>% arrange(order),
aes(fill = Male.Active, x = long, y = lat, group = group) , size=0, alpha=0.9
)
head(dt)
ggplot() +
geom_polygon(data = dt, aes(x = long, y = lat, group = group, fill = Male.Active))+
theme_minimal() +
theme(axis.title.x = element_blank(),axis.title.y = element_blank(),
text = element_text(family = "Norwester", color = "#5F5F5F"),
plot.title=element_text(size=14,family = "Norwester", face="bold", hjust = 0.5),
panel.grid = element_blank(),
axis.text = element_blank(),
axis.ticks.x = element_blank())+
scale_fill_gradient(high = '#f7fcfd', low = '#00441b',
name='% of Active Males', breaks = 0.1*0:9, labels = percent(0.1*0:9))
ggplot() +
geom_polygon(data = dt %>% filter(.frame==0), aes(x = long, y = lat, group = group, fill = Male.Active))+
theme_minimal() +
theme(axis.title.x = element_blank(),axis.title.y = element_blank(),
text = element_text(family = "Norwester", color = "#5F5F5F"),
plot.title=element_text(size=14,family = "Norwester", face="bold", hjust = 0.5),
panel.grid = element_blank(),
axis.text = element_blank(),
axis.ticks.x = element_blank())+
scale_fill_gradient(high = '#f7fcfd', low = '#00441b',
name='% of Active Males', breaks = 0.1*0:9, labels = percent(0.1*0:9))
ggplot() +
geom_polygon(data = map1.df, aes(x = long, y = lat, group = group, fill = Male.Active))+
theme_minimal() +
theme(axis.title.x = element_blank(),axis.title.y = element_blank(),
text = element_text(family = "Norwester", color = "#5F5F5F"),
plot.title=element_text(size=14,family = "Norwester", face="bold", hjust = 0.5),
panel.grid = element_blank(),
axis.text = element_blank(),
axis.ticks.x = element_blank())+
scale_fill_gradient(high = '#f7fcfd', low = '#00441b',
name='% of Active Males', breaks = 0.1*0:9, labels = percent(0.1*0:9))
### read in data to append
df <- read.csv('C:/Users/jenniferb/OneDrive - Sport England/Power BI/Active Lives Survey/Gender_May1819_LA_CC_Regv2.csv')
df <- df %>%
select('lad19cd', 'lad19nm', 'Male.Active')
#import shapefile
setwd("C:/Users/jenniferb/OneDrive - Sport England/GitHub/Geographical Data/LAD/Local_Authority_Districts_April_2019_Boundaries_UK_BUC")
map1 <- readOGR(dsn = ".", layer = "Local_Authority_Districts_April_2019_Boundaries_UK_BUC")
summary(map1) # see if projections used
## map without distortion
map1@data$id <- rownames(map1@data)
map1@data   <- join(map1@data, df, by="lad19cd")
map.clean     <- fortify(map1)
map.clean     <- join(map.clean,map1@data, by="id")
map.clean <- map.clean[grep("E", map.clean$lad19cd),] # England only
map.clean <- map.clean[, !duplicated(colnames(map.clean))] # remove dupe cols
ggplot() +
geom_polygon(data = map.clean, aes(x = long, y = lat, group = group, fill = Male.Active))+
theme_minimal() +
theme(axis.title.x = element_blank(),axis.title.y = element_blank(),
text = element_text(family = "Norwester", color = "#5F5F5F"),
plot.title=element_text(size=14,family = "Norwester", face="bold", hjust = 0.5),
panel.grid = element_blank(),
axis.text = element_blank(),
axis.ticks.x = element_blank())+
scale_fill_gradient(high = '#f7fcfd', low = '#00441b',
name='% of Active Males', breaks = 0.1*0:9, labels = percent(0.1*0:9))
## create cartogram
test_cart <- cartogram_cont(map1, "Male.Active", itermax = 7)
# check with basic plot
plot(test_cart)
# make into dataframe
map1.df     <- fortify(test_cart)
map1.df     <- join(map1.df,test_cart@data, by="id")
colnames(map1.df)
## remove wales and dupe col
map1.df <- map1.df[grep("E", map1.df$lad19cd),] # England only
map1.df <- map1.df[, !duplicated(colnames(map1.df))] # remove dupe cols
names(test_cart)
map1.df <- subset(map1.df, select = -lad19nm.1 )
# make into dataframe
map1.df     <- fortify(test_cart)
map1.df     <- join(map1.df,test_cart@data, by="id")
map1.df <- subset(map1.df, select = -lad19nm.1 )
## remove wales and dupe col
map1.df <- map1.df[, !duplicated(colnames(map1.df))] # remove dupe cols
ggplot() +
geom_polygon(data = map1.df, aes(x = long, y = lat, group = group, fill = Male.Active))+
theme_minimal() +
theme(axis.title.x = element_blank(),axis.title.y = element_blank(),
text = element_text(family = "Norwester", color = "#5F5F5F"),
plot.title=element_text(size=14,family = "Norwester", face="bold", hjust = 0.5),
panel.grid = element_blank(),
axis.text = element_blank(),
axis.ticks.x = element_blank())+
scale_fill_gradient(high = '#f7fcfd', low = '#00441b',
name='% of Active Males', breaks = 0.1*0:9, labels = percent(0.1*0:9))
ggplot() +
geom_polygon(data = map.clean, aes(x = long, y = lat, group = group, fill = Male.Active))+
theme_minimal() +
theme(axis.title.x = element_blank(),axis.title.y = element_blank(),
text = element_text(family = "Norwester", color = "#5F5F5F"),
plot.title=element_text(size=14,family = "Norwester", face="bold", hjust = 0.5),
panel.grid = element_blank(),
axis.text = element_blank(),
axis.ticks.x = element_blank())+
scale_fill_gradient(high = '#f7fcfd', low = '#00441b',
name='% of Active Males', breaks = 0.1*0:9, labels = percent(0.1*0:9))
ggplot() +
geom_polygon(data = map1.df, aes(x = long, y = lat, group = group, fill = Male.Active))+
theme_minimal() +
theme(axis.title.x = element_blank(),axis.title.y = element_blank(),
text = element_text(family = "Norwester", color = "#5F5F5F"),
plot.title=element_text(size=14,family = "Norwester", face="bold", hjust = 0.5),
panel.grid = element_blank(),
axis.text = element_blank(),
axis.ticks.x = element_blank())+
scale_fill_gradient(high = '#f7fcfd', low = '#00441b',
name='% of Active Males', breaks = 0.1*0:9, labels = percent(0.1*0:9))
### read in data to append
df <- read.csv('C:/Users/jenniferb/OneDrive - Sport England/Power BI/Active Lives Survey/Gender_May1819_LA_CC_Regv2.csv', na.strings = 0)
df <- df %>%
select('lad19cd', 'lad19nm', 'Male.Active')
#import shapefile
setwd("C:/Users/jenniferb/OneDrive - Sport England/GitHub/Geographical Data/LAD/Local_Authority_Districts_April_2019_Boundaries_UK_BUC")
map1 <- readOGR(dsn = ".", layer = "Local_Authority_Districts_April_2019_Boundaries_UK_BUC")
summary(map1) # see if projections used
## map without distortion
map1@data$id <- rownames(map1@data)
map1@data   <- join(map1@data, df, by="lad19cd")
map.clean     <- fortify(map1)
map.clean     <- join(map.clean,map1@data, by="id")
map.clean <- map.clean[grep("E", map.clean$lad19cd),] # England only
map.clean <- map.clean[, !duplicated(colnames(map.clean))] # remove dupe cols
ggplot() +
geom_polygon(data = map.clean, aes(x = long, y = lat, group = group, fill = Male.Active))+
theme_minimal() +
theme(axis.title.x = element_blank(),axis.title.y = element_blank(),
text = element_text(family = "Norwester", color = "#5F5F5F"),
plot.title=element_text(size=14,family = "Norwester", face="bold", hjust = 0.5),
panel.grid = element_blank(),
axis.text = element_blank(),
axis.ticks.x = element_blank())+
scale_fill_gradient(high = '#f7fcfd', low = '#00441b',
name='% of Active Males', breaks = 0.1*0:9, labels = percent(0.1*0:9))
## create cartogram
test_cart <- cartogram_cont(map1, "Male.Active", itermax = 7)
### read in data to append
df <- read.csv('C:/Users/jenniferb/OneDrive - Sport England/Power BI/Active Lives Survey/Gender_May1819_LA_CC_Regv2.csv', na.strings = 0)
df <- df %>%
select('lad19cd', 'Male.Active')
#import shapefile
setwd("C:/Users/jenniferb/OneDrive - Sport England/GitHub/Geographical Data/LAD/Local_Authority_Districts_April_2019_Boundaries_UK_BUC")
map1 <- readOGR(dsn = ".", layer = "Local_Authority_Districts_April_2019_Boundaries_UK_BUC")
summary(map1) # see if projections used
## map without distortion
map1@data$id <- rownames(map1@data)
map1@data   <- join(map1@data, df, by="lad19cd")
map.clean     <- fortify(map1)
map.clean     <- join(map.clean,map1@data, by="id")
map.clean <- map.clean[grep("E", map.clean$lad19cd),] # England only
### read in data to append
df <- read.csv('C:/Users/jenniferb/OneDrive - Sport England/Power BI/Active Lives Survey/Gender_May1819_LA_CC_Regv2.csv')
df <- df %>%
select('lad19cd', 'Male.Active')
#import shapefile
setwd("C:/Users/jenniferb/OneDrive - Sport England/GitHub/Geographical Data/LAD/Local_Authority_Districts_April_2019_Boundaries_UK_BUC")
range('Male.Active')
range(df$Male.Active)
#import shapefile
setwd("C:/Users/jenniferb/OneDrive - Sport England/GitHub/Geographical Data/LAD/Local_Authority_Districts_April_2019_Boundaries_UK_BUC")
map1 <- readOGR(dsn = ".", layer = "Local_Authority_Districts_April_2019_Boundaries_UK_BUC")
summary(map1) # see if projections used
## map without distortion
map1@data$id <- rownames(map1@data)
map1@data   <- join(map1@data, df, by="lad19cd")
map.clean     <- fortify(map1)
map.clean     <- join(map.clean,map1@data, by="id")
map.clean <- map.clean[grep("E", map.clean$lad19cd),] # England only
ggplot() +
geom_polygon(data = map.clean, aes(x = long, y = lat, group = group, fill = Male.Active))+
theme_minimal() +
theme(axis.title.x = element_blank(),axis.title.y = element_blank(),
text = element_text(family = "Norwester", color = "#5F5F5F"),
plot.title=element_text(size=14,family = "Norwester", face="bold", hjust = 0.5),
panel.grid = element_blank(),
axis.text = element_blank(),
axis.ticks.x = element_blank())+
scale_fill_gradient(high = '#f7fcfd', low = '#00441b',
name='% of Active Males', breaks = 0.1*0:9, labels = percent(0.1*0:9))
map.clean <- map.clean[, !duplicated(colnames(map.clean))] # remove dupe cols
ggplot() +
geom_polygon(data = map.clean, aes(x = long, y = lat, group = group, fill = Male.Active))+
theme_minimal() +
theme(axis.title.x = element_blank(),axis.title.y = element_blank(),
text = element_text(family = "Norwester", color = "#5F5F5F"),
plot.title=element_text(size=14,family = "Norwester", face="bold", hjust = 0.5),
panel.grid = element_blank(),
axis.text = element_blank(),
axis.ticks.x = element_blank())+
scale_fill_gradient(high = '#f7fcfd', low = '#00441b',
name='% of Active Males', breaks = 0.1*0:9, labels = percent(0.1*0:9))
## create cartogram
test_cart <- cartogram_cont(map1, "Male.Active")
# make into dataframe
map1.df     <- fortify(test_cart)
map1.df     <- join(map1.df,test_cart@data, by="id")
## remove dupe col
map1.df <- subset(map1.df, select = -lad19nm.1 )
## remove dupe col
map1.df <- map1.df[, !duplicated(colnames(map1.df))]
ggplot() +
geom_polygon(data = map1.df, aes(x = long, y = lat, group = group, fill = Male.Active))+
theme_minimal() +
theme(axis.title.x = element_blank(),axis.title.y = element_blank(),
text = element_text(family = "Norwester", color = "#5F5F5F"),
plot.title=element_text(size=14,family = "Norwester", face="bold", hjust = 0.5),
panel.grid = element_blank(),
axis.text = element_blank(),
axis.ticks.x = element_blank())+
scale_fill_gradient(high = '#f7fcfd', low = '#00441b',
name='% of Active Males', breaks = 0.1*0:9, labels = percent(0.1*0:9))
ggplot() +
geom_polygon(data = map.clean, aes(x = long, y = lat, group = group, fill = Male.Active))+
theme_minimal() +
theme(axis.title.x = element_blank(),axis.title.y = element_blank(),
text = element_text(family = "Norwester", color = "#5F5F5F"),
plot.title=element_text(size=14,family = "Norwester", face="bold", hjust = 0.5),
panel.grid = element_blank(),
axis.text = element_blank(),
axis.ticks.x = element_blank())+
scale_fill_gradient(high = '#f7fcfd', low = '#00441b',
name='% of Active Males', breaks = 0.1*0:9, labels = percent(0.1*0:9))
library(data.table)
data.table::
install.packages('rsqlserver')
data.table::
install.packages('dbplyr')
library(dbplyr)
data.table::
install.packages('odbc')
library(odbc)
?odbc::dbConnect()
?dbConnect()
dbConnect(dbConnect(odbc(),
Driver = "SQLServer",
Server = "se-vm-db-02",
Database = "ActivePlaces_Live",
UID = "knimeuser",
PWD = rstudioapi::askForPassword("3n84Tbm2!")
Port = 1433))
dbConnect(dbConnect(odbc(),
Driver = "SQLServer",
Server = "se-vm-db-02",
Database = "ActivePlaces_Live",
UID = "knimeuser",
PWD = rstudioapi::askForPassword("3n84Tbm2!"),
Port = 1433))
dbConnect(dbConnect(odbc(),
Driver = "SQLServer",
Server = "se-vm-db-02",
Database = "ActivePlaces_Live",
UID = "knimeuser",
PWD = rstudioapi::askForPassword("Database password"),
Port = 1433))
dbConnect(dbConnect(odbc(),
Driver = {SQLServer},
Server = "se-vm-db-02",
Database = "ActivePlaces_Live",
UID = "knimeuser",
PWD = rstudioapi::askForPassword("Database password"),
Port = 1433))
dbConnect(dbConnect(odbc(),
Driver = "SQLServer",
Server = "se-vm-db-02",
Database = "ActivePlaces_Live",
UID = "knimeuser",
PWD = rstudioapi::askForPassword("Database password"),
Trusted_Connection=TRUE,
Port = 1433))
dbConnect(dbConnect(odbc(),
Driver = "SQL Server",
Server = "se-vm-db-02",
Database = "ActivePlaces_Live",
UID = "knimeuser",
PWD = rstudioapi::askForPassword("Database password"),
Trusted_Connection=TRUE,
Port = 1433))
dbConnect(dbConnect(odbc(),
Server = "se-vm-db-02",
Database = "ActivePlaces_Live",
UID = "knimeuser",
PWD = rstudioapi::askForPassword("Database password"),
Trusted_Connection=TRUE,
Port = 1433))
dbConnect(dbConnect(odbc(),
Driver = "SQL Server",
Server = "se-vm-db-02",
Database = "ActivePlaces_Live",
UID = "knimeuser",
PWD = rstudioapi::askForPassword("Database password"),
Trusted_Connection=TRUE,
Port = 1433))
install.packages('DBI')
dbConnect(dbConnect(odbc(),
Driver = "SQL Server",
Server = "se-vm-db-02",
Database = "ActivePlaces_Live",
UID = "knimeuser",
PWD = rstudioapi::askForPassword("Database password"),
Trusted_Connection=TRUE,
Port = 1433))
library(odbc)
library(DBI)
dbConnect(dbConnect(odbc(),
Driver = "SQL Server",
Server = "se-vm-db-02",
Database = "ActivePlaces_Live",
UID = "knimeuser",
PWD = rstudioapi::askForPassword("Database password"),
Trusted_Connection=TRUE,
Port = 1433))
?dbConnect
dbConnect(odbc(),
drv = "SQL Server",
server = "se-vm-db-02",
database = "ActivePlaces_Live",
uid = "knimeuser",
pwd = rstudioapi::askForPassword("Database password"),
Port = 1433))
dbConnect(odbc(),
drv = "SQL Server",
server = "se-vm-db-02",
database = "ActivePlaces_Live",
uid = "knimeuser",
pwd = rstudioapi::askForPassword("Database password"),
Port = 1433)
odbc::dbConnect(odbc(),
drv = "SQL Server",
server = "se-vm-db-02",
database = "ActivePlaces_Live",
uid = "knimeuser",
pwd = rstudioapi::askForPassword("Database password"),
Port = 1433)
odbc::dbConnect(
drv = "SQL Server",
server = "se-vm-db-02",
database = "ActivePlaces_Live",
uid = "knimeuser",
pwd = rstudioapi::askForPassword("Database password"),
Port = 1433)
odbc::dbConnect(
drv = "Open Source SQL Driver",
server = "se-vm-db-02",
database = "ActivePlaces_Live",
uid = "knimeuser",
pwd = rstudioapi::askForPassword("Database password"),
Port = 1433)

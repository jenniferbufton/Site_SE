library(class)
library(gmodels)
library(rlang)
library(ggplot2)
library(caret)
library(dplyr)
library(extrafont)
library(leaflet)

sp_org

setwd("C:/Users/jenniferb/OneDrive - Sport England/GitHub/Small Grants")
sg_df <- read.csv('SG_all.csv', header = TRUE, na.strings = c("","N/A"))

no.na <- na.omit(sg_df[sg_df$Govt_Outcome])

ggplot(sg_df)+
  geom_bar(aes(x="", y = AWARD, fill = Govt_Outcome), stat = "identity" ) +
  coord_polar("y", start = 0)+
  theme(text = element_text(family = "Norwester", size = 12, color = "#525252"),
        plot.title=element_text(size=14,family = "Norwester", face="bold", hjust = 0.5, color = "#525252"),
        axis.text.x = element_blank(),
        panel.grid = element_blank(),
        panel.background = element_blank(),
        plot.caption=element_text(size=9, hjust=0, margin=margin(15,0,0,0)),
        legend.position = "right") +
  labs( x= "", y = "", title = "Amount Awarded per Government Outcome")+
  scale_fill_manual(values = se_colour, name = "Outcome")

summary(sg_df$Govt_Outcome)

sp_vec <- sg_df %>% count(Sport, sort = TRUE)
sp_per <- sp_vec[1,2] / sum(sp_vec$n) * 100
sp_per <- unlist(sp_per)
sp_org <- sg_df %>% count(ORGANISATION_NAME, sort = TRUE) 
sp_org$Times_funded <- ifelse(sp_org$n > 1, "More than once", "Once")

#### read in GMS data
setwd("C:/Users/jenniferb/OneDrive - Sport England/GitHub/Small Grants")
dataset <- read.csv('TryforML.csv', header = TRUE) 
dataset <- dataset%>% 
  rename("URN" = GMS_URN, "Postcode" = Location_Postcode ) %>%
   select(c("AWARD", "Total_Project_Cost", "Partnership_Funding", "OTHER_FUNDING", "Org_Class", "Govt_Outcome", "Sport", "prediction" ))

dataset$Partnership_Funding[dataset$Partnership_Funding == 0] <- NA
dataset$OTHER_FUNDING[dataset$OTHER_FUNDING == 0] <- NA
dataset <- na.omit(dataset)



#check 

smoothScatter(sg_df[,13:14], xlab = "Award Amount", ylab = "Total Cost" )

ggplot(dataset)+
  geom_col(aes(Sport, AWARD, fill = prediction)) +
  coord_flip() +
  theme(text = element_text(family = "Norwester", size = 12, color = "#525252"),
        plot.title=element_text(size=14,family = "Norwester", face="bold", hjust = 0.5, color = "#525252"),
        axis.text.x = element_text(angle = 45, hjust = 1),
        panel.grid = element_blank(),
        panel.background = element_blank(),
        plot.caption=element_text(size=9, hjust=0, margin=margin(15,0,0,0)),
        legend.position = "right") 

ggplot(dataset)+
  geom_histogram(aes(Org_Class, fill = prediction), stat = "count") +
  coord_flip() +
  theme(text = element_text(family = "Norwester", size = 12, color = "#525252"),
        plot.title=element_text(size=14,family = "Norwester", face="bold", hjust = 0.5, color = "#525252"),
        axis.text.x = element_text(angle = 45, hjust = 1),
        panel.grid = element_blank(),
        panel.background = element_blank(),
        plot.caption=element_text(size=9, hjust=0, margin=margin(15,0,0,0)),
        legend.position = "right") 

ggplot(dataset)+
  geom_histogram(aes(Govt_Outcome, fill = prediction), stat = "count") +
  theme(text = element_text(family = "Norwester", size = 12, color = "#525252"),
        plot.title=element_text(size=14,family = "Norwester", face="bold", hjust = 0.5, color = "#525252"),
        axis.text.x = element_text(angle = 45, hjust = 1),
        panel.grid = element_blank(),
        panel.background = element_blank(),
        plot.caption=element_text(size=9, hjust=0, margin=margin(15,0,0,0)),
        legend.position = "right") 


plot(dataset$AWARD)

ggplot(dataset)+
  geom_point(aes( AWARD, Total_Project_Cost, color = prediction))+
  theme(text = element_text(family = "Norwester", size = 12, color = "#525252"),
        plot.title=element_text(size=14,family = "Norwester", face="bold", hjust = 0.5, color = "#525252"),
        axis.text.x = element_text(angle = 45, hjust = 1),
        panel.grid = element_blank(),
        panel.background = element_blank(),
        plot.caption=element_text(size=9, hjust=0, margin=margin(15,0,0,0)),
        legend.position = "right") 

#re-scale and convert back to dataframe
df <- dataset
df.scale <- sapply(df[,1:4], FUN = scale)
df.scale <- as.data.frame(df.scale)
df.scale$Outcome <- df$prediction

# create test and train datasets

train_index <- createDataPartition(df.scale$Outcome, p = 0.75, times=1, list = FALSE) # from caret package. !st argument is dependent varaible, p = split, times = number it runs, list = false if 1 tmes

train_d <- df.scale[train_index,]
test_d <- df.scale[-train_index,]


# testing distribution
table((df.scale$Outcome))
prop.table(table(df.scale$Outcome))
prop.table(table(train_d$Outcome))
prop.table(table(test_d$Outcome))

#knn
train_d_no_class <- train_d[,-5] # no target variable 
test_d_no_class <- test_d[,-5] # no target variable 
train_d_labels <- train_d[,5] # Only target variable 

# four predictors in this model
d_test_pred <- knn(train = train_d_no_class, test = test_d_no_class,
                   cl = train_d_labels, k = 41)

sqrt(nrow(df.scale)) # find square root of nrows 

#evaluation
test_d$pred <- d_test_pred # add new prediction column
head(test_d)

test_d$correct <- 'n'
test_d$correct[test_d$Outcome == test_d$pred] <- 'y' # Add another column which shows if correct

table(test_d$correct) 
prop.table(table(test_d$correct)) 

CrossTable(x = test_d$Outcome, y = d_test_pred,
           prop.chisq=FALSE)


sg_df <- read.csv('SG_all.csv', header = TRUE)
colnames(sg_df)
nrow(sg_df)

percent_jb <- function(x, digits = 2, format = "f", ...) {
  paste0(formatC(100 * x, format = format, digits = digits, ...), "%")
}

summary(sg_df$Govt_Outcome)

sg_map <- sg_df %>%
mutate(group = cut(AWARD, breaks = c(0, 500, 1000, 2000, 50000, 7500, 10000, Inf), 
                   labels = c("0 - ?500", "?501 - ?1,000", "?1,001 - ?2,000", "?2,001 - ?5,000", "?5,001 - ?7,500", "?7,501 - ?10,000", "Over ?10,000"))) 

pal <- colorFactor(palette = c('#fff7f3','#fde0dd','#fcc5c0','#fa9fb5','#f768a1','#dd3497','#ae017e','#7a0177'), domain = sg_map$group)


leaflet() %>% addTiles() %>%
  addCircleMarkers(data= sg_map, ~longitude, ~latitude, 
                   popup = paste("Amount:", "?", formatC(as.numeric(sg_map$AWARD), big.mark = ",", digits = 10),  "<br>",
                                 "Name:", sg_map$ORGANISATION_NAME), 
                   color = ~pal(group),
                   fillOpacity = ~pal(group),
                   radius = ~sqrt(Total_Project_Cost)* 0.01) %>%
  addLegend("bottomright", pal = pal, values = sg_map$group, title = "National Lottery Awards: Sport England 2019",
            opacity = 1)

sp_vec <- count(sg_df$Sport, )

sg_df$Sport

### Cartogram

setwd("C:/Users/jenniferb/OneDrive - Sport England/GitHub/Geographical Data/LAD/Local_Authority_Districts_April_2019_Boundaries_UK_BUC")
map1 <- readOGR(dsn = ".", layer = "Local_Authority_Districts_April_2019_Boundaries_UK_BUC")


sg_df$lad19nm <- sg_df$LOCAL_AUTHORITY
df <- sg_df

colnames(sg_df)


## map without distortion
map1@data$id <- rownames(map1@data)
map1@data   <- join(map1@data, df, by="lad19nm")
map.clean     <- fortify(map1)
map.clean     <- join(map.clean,map1@data, by="id")

map.clean <- map.clean[grep("E", map.clean$lad19cd),] # England only
map.clean <- map.clean[, !duplicated(colnames(map.clean))] # remove dupe cols


ggplot() +
  geom_polygon(data = map.clean, aes(x = long, y = lat, group = group, fill = AWARD))+
  theme_minimal() + 
  theme(axis.title.x = element_blank(),axis.title.y = element_blank(), 
        text = element_text(family = "Norwester", color = "#5F5F5F"), 
        plot.title=element_text(size=14,family = "Norwester", face="bold", hjust = 0.5),
        panel.grid = element_blank(), 
        axis.text = element_blank(),
        axis.ticks.x = element_blank())+
  scale_fill_gradient(high = '#00441b' , low = '#f7fcfd' ,
                      name='Funded locations')

map1$AWARD[is.na(map1$AWARD)] <- 0

## create cartogram
test_cart <- cartogram_cont(map1, "AWARD")

colnames(map)

# check with basic plot
plot(test_cart)


# make into dataframe
map1.df     <- fortify(test_cart)
map1.df     <- join(map1.df,test_cart@data, by="id")


## remove dupe col
map1.df <- map1.df[, !duplicated(colnames(map1.df))]

#House colours if needed
 se_colour<- c("#E79AB5", "#B8345C", "#8CCDD6", "#43A8B6", "#00818F", "#C1DC9A", "#7ABB40", "#5D4086")

ggplot() +
  geom_polygon(data = map1.df, aes(x = long, y = lat, group = group, fill = Male.Active))+
  theme_minimal() + 
  theme(axis.title.x = element_blank(),axis.title.y = element_blank(), 
        text = element_text(family = "Norwester", color = "#5F5F5F"), 
        plot.title=element_text(size=14,family = "Norwester", face="bold", hjust = 0.5),
        panel.grid = element_blank(), 
        axis.text = element_blank(),
        axis.ticks.x = element_blank())+
  scale_fill_gradient(high = '#f7fcfd', low = '#00441b',
                      name='% of Active Males', breaks = 0.1*0:9, labels = percent(0.1*0:9))

text_df <- read.csv('12Month_Prog.csv', header = TRUE)
library(wordcloud2)
wordcloud2(text_df[,c(2,4)], fontFamily = "Norwester", color = "random-light")

ggplot(text_df, aes(x = Topic.id, y = Aggregated.TF, fill = Term.as.String) ) +
  geom_bar(stat = 'identity' ) +
  theme(strip.background = element_blank(), strip.placement = 'outside',
        strip.text.x=element_text(size=8, family='Segoe UI'))+
  theme(text = element_text(family = "Norwester", size = 12, color = "#525252"),
              plot.title=element_text(size=14,family = "Norwester", face="bold", hjust = 0.5, color = "#525252"),
              axis.text.x = element_text(angle = 45, hjust = 1),
              panel.grid = element_blank(),
              panel.background = element_blank(),
              plot.caption=element_text(size=9, hjust=0, margin=margin(15,0,0,0)),
              legend.position = "left") +
  #scale_color_manual(values = se_colour)+
  #scale_fill_manual(values = se_colour)+
  labs( x= "Category", y = "Rate")

topic_tbl <- read.csv('12Month_top.csv') %>%
  rename("Topic" = Topic.id, "Terms" = Concatenate.Term.)
print(topic_tbl)

sentiment_df <- read.csv('Sentiment.csv', header = TRUE)%>%
  select("Document", "Sentiment.Prediction", "all.Words") %>%
  rename("Sentiment" = Sentiment.Prediction, `Number of Words` = "all.Words")
head(sentiment_df)

ME_df <- read.csv("TryforML.csv")
sent_tab <- table(sentiment_df$Sentiment)
sent_tab[1]
head(text_df)
text_df[28,]
grep("issue", text_df$Term.as.String)
